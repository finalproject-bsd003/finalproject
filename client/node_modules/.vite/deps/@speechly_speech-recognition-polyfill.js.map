{
  "version": 3,
  "sources": ["../../@speechly/browser-client/src/speechly/types.ts", "../../@speechly/browser-client/src/speechly/segment.ts", "../../common/temp/node_modules/.pnpm/tslib@2.4.1/node_modules/tslib/tslib.es6.js", "../../@speechly/browser-client/src/microphone/types.ts", "../../@speechly/browser-client/src/microphone/browser_microphone.ts", "../../@speechly/browser-client/src/websocket/types.ts", "../../@speechly/browser-client/src/storage/types.ts", "../../@speechly/browser-client/src/client/types.ts", "../../@speechly/browser-client/src/client/state.ts", "../../common/temp/node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/rng.js", "../../common/temp/node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/regex.js", "../../common/temp/node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/validate.js", "../../common/temp/node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/stringify.js", "../../common/temp/node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/v4.js", "../../common/temp/node_modules/.pnpm/base-64@0.1.0/node_modules/base-64/base64.js", "../../@speechly/browser-client/src/websocket/token.ts", "../../@speechly/browser-client/src/websocket/webWorkerController.ts", "../../@speechly/browser-client/src/storage/storage.ts", "../../@speechly/browser-client/src/client/parsers.ts", "../../@speechly/browser-client/src/client/decoder.ts", "../../@speechly/browser-client/src/microphone/audioworklet.ts", "../../@speechly/browser-client/src/client/browser_client.ts", "../../@speechly/speech-recognition-polyfill/src/types.ts", "../../@speechly/speech-recognition-polyfill/src/createSpeechRecognition.ts", "../../@speechly/speech-recognition-polyfill/src/index.ts"],
  "sourcesContent": ["import { SegmentState } from './segment'\n\n/**\n * Error to be thrown when the device does not support audioContext.\n * @public\n */\nexport const ErrDeviceNotSupported = new Error('Current device does not support microphone API')\n\n/**\n * Error to be thrown when user tries to change appId without project login.\n * @public\n */\nexport const ErrAppIdChangeWithoutProjectLogin = new Error('AppId changed without project login')\n\nexport class WebsocketError extends Error {\n  code: number\n  wasClean: boolean\n\n  constructor(reason: string, code: number, wasClean: boolean, ...params: any) {\n    // Pass remaining arguments (including vendor specific ones) to parent constructor\n    super(...params)\n\n    this.name = `WebsocketError code ${code}`\n    this.message = reason\n    this.code = code\n    this.wasClean = wasClean\n  }\n}\n\n/**\n * Default sample rate for microphone streams.\n * @public\n */\nexport const DefaultSampleRate = 16000\n\n/**\n * A structure that accumulates speech recognition (ASR) and natural language understanding (NLU) results.\n * The segment contains exactly one intent, one or more words and zero or more entities depending on the NLU configuration.\n * @public\n */\nexport interface Segment {\n  /**\n   * Audio context id for the utterance. Unique for the processed audio chunk between start and stop calls.\n   * One utterance may produce one or more segments.\n   */\n  contextId: string\n\n  /**\n   * 0-based segment index within the audio context. Together with {@link contextId} forms an unique identifier for the segment.\n   */\n  id: number\n\n  /**\n   * Whether the segment is final. A final segment is guaranteed to only contain final parts.\n   */\n  isFinal: boolean\n\n  /**\n   * The intent of the segment.\n   */\n  intent: Intent\n\n  /**\n   * All words which belong to the segment, ordered by their indices.\n   */\n  words: Word[]\n\n  /**\n   * All entities which belong to the segment, not ordered.\n   */\n  entities: Entity[]\n}\n\n/**\n * The intent detected by the SLU API.\n * @public\n */\nexport interface Intent {\n  /**\n   * The value of the intent.\n   */\n  intent: string\n\n  /**\n   * Whether the intent was detected as final.\n   */\n  isFinal: boolean\n}\n\n/**\n * A single word detected by the SLU API.\n * @public\n */\nexport interface Word {\n  /**\n   * The value of the word.\n   */\n  value: string\n\n  /**\n   * The index of the word within a segment.\n   */\n  index: number\n\n  /**\n   * Start timestamp of the word from the start of the audio stream.\n   */\n  startTimestamp: number\n\n  /**\n   * End timestamp of the word from start of the audio stream.\n   */\n  endTimestamp: number\n\n  /**\n   * Whether the word was detected as final.\n   */\n  isFinal: boolean\n}\n\n/**\n * A single entity detected by the SLU API.\n * @public\n */\nexport interface Entity {\n  /**\n   * The type specified by the developer in the NLU rules in the dashboard (e.g. restaurant_type).\n   */\n  type: string\n\n  /**\n   * The value of the entity (e.g. Papa Joe's).\n   */\n  value: string\n\n  /**\n   * The index of the first word that contains this entity.\n   */\n  startPosition: number\n\n  /**\n   * The index of the last word that contains this entity.\n   */\n  endPosition: number\n\n  /**\n   * Whether the entity was detected as final.\n   */\n  isFinal: boolean\n}\n\n/**\n * A structure to accumulate SLU results for one audio context\n * @internal\n */\nexport interface SLUResults {\n  segments: Map<number, SegmentState>\n  audioStartTimeMillis: number\n}\n", "import { Word, Entity, Intent, Segment } from './types'\n\n/**\n * A high level API for automatic speech recognition (ASR) and natural language understanding (NLU) results. Results will accumulate in Segment for the duration of the an utterance.\n * @internal\n */\nexport class SegmentState {\n  /**\n   * Audio context id for the utterance. Unique for the processed audio chunk between start and stop calls.\n   * One utterance may produce one or more segments.\n   */\n  contextId: string\n\n  /**\n   * 0-based segment index within the audio context. Together with {@link contextId} forms an unique identifier for the segment.\n   */\n  id: number\n\n  /**\n   * True when the segment will not be changed any more\n   */\n  isFinalized: boolean = false\n\n  /**\n   * Detected words in the segment\n   */\n  words: Word[] = []\n\n  /**\n   * Detected entities in the segment\n   */\n  entities: Map<string, Entity> = new Map<string, Entity>()\n\n  /**\n   * Detected intent for the segment\n   */\n  intent: Intent = { intent: '', isFinal: false }\n\n  /**\n   * @param contextId - Audio context id\n   * @param segmentIndex - 0-based segment index within the audio context\n   * @internal\n   */\n  constructor(contextId: string, segmentIndex: number) {\n    this.contextId = contextId\n    this.id = segmentIndex\n  }\n\n  toSegment(): Segment {\n    let i = 0\n    const entities: Entity[] = new Array(this.entities.size)\n    this.entities.forEach(v => {\n      entities[i] = v\n      i++\n    })\n\n    return {\n      id: this.id,\n      contextId: this.contextId,\n      isFinal: this.isFinalized,\n      words: this.words,\n      entities: entities,\n      intent: this.intent,\n    }\n  }\n\n  toString(): string {\n    const segment: Segment = this.toSegment()\n    const words = segment.words.filter((w: Word) => w.value)\n    const cleanSegment = { ...segment, ...{ words } }\n    return JSON.stringify(cleanSegment, null, 2)\n  }\n\n  /**\n   * @param words - changed words\n   * @returns updated SegmentState\n   * @internal\n   */\n  updateTranscript(words: Word[]): SegmentState {\n    words.forEach(w => {\n      // Only accept tentative words if the segment is tentative.\n      if (!this.isFinalized || w.isFinal) {\n        this.words[w.index] = w\n      }\n    })\n\n    return this\n  }\n\n  /**\n   * @param entities - changed entities\n   * @returns updated SegmentState\n   * @internal\n   */\n  updateEntities(entities: Entity[]): SegmentState {\n    entities.forEach(e => {\n      // Only accept tentative entities if the segment is tentative.\n      if (!this.isFinalized || e.isFinal) {\n        this.entities.set(this.entityMapKey(e), e)\n      }\n    })\n    return this\n  }\n\n  /**\n   * @param intent - changed intent\n   * @returns updated SegmentState\n   * @internal\n   */\n  updateIntent(intent: Intent): SegmentState {\n    // Only accept tentative intent if the segment is tentative.\n    if (!this.isFinalized || intent.isFinal) {\n      this.intent = intent\n    }\n\n    return this\n  }\n\n  /**\n   * @returns SegmentState with final flags set\n   * @internal\n   */\n  finalize(): SegmentState {\n    // Filter away any entities which were not finalized.\n    this.entities.forEach((val, key) => {\n      if (!val.isFinal) {\n        this.entities.delete(key)\n      }\n    })\n\n    // Filter away any transcripts which were not finalized.\n    this.words = this.words.filter(w => w.isFinal)\n\n    if (!this.intent.isFinal) {\n      this.intent.intent = ''\n      this.intent.isFinal = true\n    }\n\n    // Mark as final.\n    this.isFinalized = true\n\n    return this\n  }\n\n  private entityMapKey(e: Entity): string {\n    return `${e.startPosition.toString()}:${e.endPosition.toString()}`\n  }\n}\n", "/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n", "/**\n * Error to be thrown when the microphone was accessed before it was initialized.\n * @public\n */\nexport const ErrNotInitialized = new Error('Microphone is not initialized')\n\n/**\n * Error to be thrown when the initialize method of a Microphone instance is called more than once.\n * @public\n */\nexport const ErrAlreadyInitialized = new Error('Microphone is already initialized')\n\n/**\n * Error to be thrown when user did not give consent to the application to record audio.\n * @public\n */\nexport const ErrNoAudioConsent = new Error('Microphone consent is not given')\n\nexport enum AudioSourceState {\n  NoAudioConsent = 'NoAudioConsent',\n  NoBrowserSupport = 'NoBrowserSupport',\n  Stopped = 'Stopped',\n  Starting = 'Starting',\n  Started = 'Started',\n}\n", "import { ErrDeviceNotSupported, DefaultSampleRate } from '../speechly'\nimport { AudioSourceState, ErrNoAudioConsent } from './types'\n\n/**\n * Gets browser based microphone using the window.navigator.mediaDevices interface.\n * The exposed `mediaStream` can be attached to a `BrowserClient` instance.\n * @public\n */\nexport class BrowserMicrophone {\n  private muted: boolean = false\n  private initialized: boolean = false\n  private state: AudioSourceState = AudioSourceState.Stopped\n\n  private readonly nativeResamplingSupported: boolean\n  private readonly autoGainControlSupported: boolean\n  private readonly debug = false\n\n  // The media stream and audio track are initialized during `initialize()` call.\n  mediaStream?: MediaStream\n  stateChangeCbs: Array<(state: AudioSourceState) => void> = []\n\n  constructor() {\n    try {\n      const constraints = window.navigator.mediaDevices.getSupportedConstraints()\n      this.nativeResamplingSupported = constraints.sampleRate === true\n      this.autoGainControlSupported = constraints.autoGainControl === true\n    } catch {\n      this.nativeResamplingSupported = false\n      this.autoGainControlSupported = false\n    }\n  }\n\n  /**\n   * Adds a listener for the state changes of the client.\n   * @param cb - the callback to invoke on a client state change.\n   */\n  onStateChange(cb: (state: AudioSourceState) => void): void {\n    this.stateChangeCbs.push(cb)\n  }\n\n  /**\n   * Initializes the microphone. Needs to happen after a user interaction in the view.\n   * The reason for that is that it's required for user to first interact with the page,\n   * before it can capture or play audio and video, for privacy and user experience reasons.\n   */\n  async initialize(): Promise<void> {\n    if (this.initialized) {\n      return\n    }\n\n    // ensure mediaDevices are available\n    if (window.navigator?.mediaDevices === undefined) {\n      this.setState(AudioSourceState.NoBrowserSupport)\n      throw ErrDeviceNotSupported\n    }\n\n    const mediaStreamConstraints: MediaStreamConstraints = {\n      video: false,\n    }\n\n    if (this.nativeResamplingSupported || this.autoGainControlSupported) {\n      mediaStreamConstraints.audio = {\n        sampleRate: DefaultSampleRate,\n        // @ts-ignore\n        autoGainControl: this.autoGainControlSupported,\n      }\n    } else {\n      mediaStreamConstraints.audio = true\n    }\n    try {\n      this.setState(AudioSourceState.Starting)\n      this.mediaStream = await window.navigator.mediaDevices.getUserMedia(mediaStreamConstraints)\n    } catch (err) {\n      this.setState(AudioSourceState.NoAudioConsent)\n      console.error(err)\n      throw ErrNoAudioConsent\n    }\n\n    this.initialized = true\n    this.muted = true\n    this.setState(AudioSourceState.Started)\n  }\n\n  setState(newState: AudioSourceState): void {\n    if (this.state === newState) {\n      return\n    }\n\n    if (this.debug) {\n      console.log('[BrowserMicrophone]', this.state, '->', newState)\n    }\n\n    this.state = newState\n    this.stateChangeCbs.forEach(cb => cb(newState))\n  }\n\n  /**\n   * Closes the microphone, releases all resources and stops the Speechly client.\n   */\n  async close(): Promise<void> {\n    if (!this.initialized) return\n\n    this.muted = true\n\n    // Stop all media tracks\n    const stream = this.mediaStream as MediaStream\n    stream.getTracks().forEach(t => t.stop())\n\n    // Unset all audio infrastructure\n    this.mediaStream = undefined\n    this.initialized = false\n    this.setState(AudioSourceState.Stopped)\n  }\n\n  /**\n   * @returns true if microphone is open\n   */\n  public isRecording(): boolean {\n    return !this.muted\n  }\n}\n", "import { AudioProcessorParameters, ContextOptions, StreamOptions, VadOptions } from '../client'\nimport { WebsocketError } from '../speechly'\n\n/**\n * The interface for response returned by WebSocket client.\n * @internal\n */\nexport interface WebsocketResponse {\n  /**\n   * Response type.\n   */\n  type: WebsocketResponseType | WorkerSignal\n\n  /**\n   * Audio context ID.\n   */\n  audio_context: string\n\n  /**\n   * Segment ID.\n   */\n  segment_id: number\n\n  /**\n   * Response payload.\n   *\n   * The payload value should match the response type (i.e. TranscriptResponse should have Transcript type).\n   * Not all response types have payloads - Started, Stopped and SegmentEnd don't have payloads.\n   * TentativeIntent and Intent share the same payload interface (IntentResponse).\n   */\n  data: TranscriptResponse | EntityResponse | IntentResponse | TentativeTranscriptResponse | TentativeEntitiesResponse\n\n  /**\n   * Optional client-side metadata associated to the response.\n   * The payload value, if present, should match the response type.\n   */\n  params?: StartContextParams\n}\n\n/**\n * Known WebSocket response types.\n * @internal\n */\nexport enum WebsocketResponseType {\n  Started = 'started',\n  Stopped = 'stopped',\n  SegmentEnd = 'segment_end',\n  Transcript = 'transcript',\n  Entity = 'entity',\n  Intent = 'intent',\n  TentativeTranscript = 'tentative_transcript',\n  TentativeEntities = 'tentative_entities',\n  TentativeIntent = 'tentative_intent',\n}\n\n/**\n * Messages from worker to controller\n * @internal\n */\nexport enum WorkerSignal {\n  Opened = 'WEBSOCKET_OPEN',\n  Closed = 'WEBSOCKET_CLOSED',\n  AudioProcessorReady = 'SOURCE_SAMPLE_RATE_SET_SUCCESS',\n  VadSignalHigh = 'VadSignalHigh',\n  VadSignalLow = 'VadSignalLow',\n  RequestContextStart = 'RequestContextStart',\n}\n\n/**\n * Messages from controller to worker\n * @internal\n */\nexport enum ControllerSignal {\n  connect = 'connect',\n  initAudioProcessor = 'initAudioProcessor',\n  adjustAudioProcessor = 'adjustAudioProcessor',\n  SET_SHARED_ARRAY_BUFFERS = 'SET_SHARED_ARRAY_BUFFERS',\n  CLOSE = 'CLOSE',\n  START_CONTEXT = 'START_CONTEXT',\n  SWITCH_CONTEXT = 'SWITCH_CONTEXT',\n  STOP_CONTEXT = 'STOP_CONTEXT',\n  AUDIO = 'AUDIO',\n  startStream = 'startStream',\n  stopStream = 'stopStream',\n  setContextOptions = 'setContextOptions',\n}\n\nexport interface StartContextParams {\n  audioStartTimeMillis: number\n}\n\n/**\n * Transcript response payload.\n * @internal\n */\nexport interface TranscriptResponse {\n  /**\n   * Transcripted word.\n   */\n  word: string\n\n  /**\n   * The index of the transcripted word in the segment.\n   */\n  index: number\n\n  /**\n   * Start timestamp of the transcript in the audio stream in milliseconds.\n   */\n  start_timestamp: number\n\n  /**\n   * End timestamp of the transcript in the audio stream in milliseconds.\n   */\n  end_timestamp: number\n}\n\n/**\n * Entity response payload.\n * @internal\n */\nexport interface EntityResponse {\n  /**\n   * Entity type (e.g. restaurant, direction, room, device).\n   */\n  entity: string\n\n  /**\n   * Entity value (e.g. \"sushi bar\", \"northwest\", \"living room\", \"kitchen lights\").\n   */\n  value: string\n\n  /**\n   * Start position of the entity in the segment. Correlates with TranscriptResponse indices.\n   * Inclusive.\n   */\n  start_position: number\n\n  /**\n   * End position of the entity in the segment. Correlates with TranscriptResponse indices.\n   * Exclusive.\n   */\n  end_position: number\n}\n\n/**\n * Intent response payload.\n * @internal\n */\nexport interface IntentResponse {\n  /**\n   * Intent type (e.g. \"book\", \"find\", \"turn_on\").\n   */\n  intent: string\n}\n\n/**\n * Tentative transcript response payload.\n * @internal\n */\nexport interface TentativeTranscriptResponse {\n  /**\n   * Transcript text, i.e. the full transcript of the audio to-date.\n   */\n  transcript: string\n\n  /**\n   * Individual transcript words.\n   */\n  words: TranscriptResponse[]\n}\n\n/**\n * Tentative entities response payload.\n * @internal\n */\nexport interface TentativeEntitiesResponse {\n  /**\n   * Individual entities.\n   */\n  entities: EntityResponse[]\n}\n\n/**\n * A callback that is invoked whenever a response is received from Speechly SLU WebSocket API.\n * @internal\n */\nexport type ResponseCallback = (response: WebsocketResponse) => void\n\n/**\n * A callback that is invoked whenever WebSocket connection is closed.\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/member-delimiter-style\nexport type CloseCallback = (err: WebsocketError) => void\n\n/**\n * The interface for a client for Speechly SLU WebSocket API.\n * @internal\n */\n\n/**\n * @internal\n */\nexport interface APIClient {\n  /**\n   * Registers a callback that is invoked whenever a response is received from the API.\n   *\n   * @param cb - this callback to invoke.\n   */\n  onResponse(cb: ResponseCallback): void\n\n  /**\n   * Registers a callback that is invoked whenever WebSocket connection is closed (either normally or due to an error).\n   *\n   * @param cb - the callback to invoke.\n   */\n  onClose(cb: CloseCallback): void\n\n  /**\n   * Initialises the client.\n   *\n   * This method will be called by the Client as part of the initialisation process.\n   *\n   * @param apiUrl - url.\n   * @param authToken - authentication token.\n   * @param targetSampleRate - target sample rate of audio.\n   * @param debug - debug flag.\n   */\n  initialize(apiUrl: string, authToken: string, targetSampleRate: number, debug: boolean): Promise<void>\n\n  /**\n   * Initialises the client.\n   *\n   * This should prepare websocket to be used (set source sample rate).\n   * This method will be called by the Client as part of the initialisation process.\n   *\n   * @param sourceSampleRate - sample rate of audio source.\n   * @param frameMillis - milliseconds per audio frame. Default 30 [ms].\n   * @param historyFrames - number of history audio frames. Default 5 [frames].\n   */\n  initAudioProcessor(sourceSampleRate: number, frameMillis: number, historyFrames: number, vadOptions?: VadOptions): Promise<void>\n\n  /**\n   * Control audio processor parameters\n   * @param ap - Audio processor parameters to adjust\n   */\n  adjustAudioProcessor(ap: AudioProcessorParameters): void\n\n  /**\n   * Closes the client.\n   *\n   * This should close the connection and tear down all infrastructure related to it.\n   * Calling `initialize` again after calling `close` should be possible.\n   */\n  close(): Promise<void>\n\n  /**\n   * Starts a new audio context by sending the start event to the API.\n   * The promise returned should resolve or reject after the API has responded with confirmation or an error has occured.\n   */\n  startContext(options?: ContextOptions): Promise<string>\n\n  /**\n   * Stops an audio context by sending the stop event to the API.\n   * The promise returned should resolve or reject after the API has responded with confirmation or an error has occured.\n   */\n  stopContext(): Promise<string>\n\n  /**\n   * Stops current context and immediately starts a new SLU context\n   * by sending a start context event to the API and unmuting the microphone.\n   */\n  switchContext(options: ContextOptions): Promise<string>\n\n  /**\n   * Sends audio to the API.\n   * If there is no active context (no successful previous calls to `startContext`), this must fail.\n   *\n   * @param audioChunk - audio chunk to send.\n   */\n  sendAudio(audioChunk: Float32Array): void\n\n  /**\n   * Sends message to the Worker.\n   *\n   * @param message - message to send.\n   */\n  postMessage(message: Object): void\n\n  startStream(streamOptions: StreamOptions): Promise<void>\n\n  stopStream(): Promise<void>\n\n  /**\n   * Sets the default context options (appId, inference parameters, timezone). New audio contexts\n   * use these options until new options are provided. Decoder's functions startContext() can\n   * also override the options per function call.\n   */\n  setContextOptions(options: ContextOptions): Promise<void>\n}\n", "/**\n * Error to be thrown if storage API is not supported by the device.\n * @public\n */\nexport const ErrNoStorageSupport = new Error('Current device does not support storage API')\n\n/**\n * Error to be thrown if requested key was not found in the storage.\n * @public\n */\nexport const ErrKeyNotFound = new Error('Requested key was not present in storage')\n\n/**\n * The interface for local key-value storage.\n * @internal\n */\nexport interface Storage {\n  /**\n   * Retrieves a key from the storage.\n   *\n   * @param key - the key to retrieve\n   */\n  get(key: string): string | null\n\n  /**\n   * Adds a key to the storage, possibly overwriting existing value.\n   *\n   * @param key - the key to write\n   * @param val - the value to write\n   */\n  set(key: string, val: string): void\n\n  /**\n   * Adds a key to the storage, possibly overwriting existing value.\n   *\n   * @param key - the key to write\n   * @param genFn - generator function that will be invoked if the key cannot be found in the storage.\n   * The return value of the function will be used as the value that will be stored under the given key.\n   */\n  getOrSet(key: string, genFn: () => string): string\n}\n", "import { Segment, Word, Entity, Intent, DefaultSampleRate } from '../speechly'\nimport { Storage } from '../storage'\nimport { CloudDecoder } from './decoder'\n\n/**\n * @internal\n */\nexport interface ResolvedDecoderOptions {\n  /**\n   * Connect to Speechly upon creating the client instance. Defaults to true.\n   */\n  connect: boolean\n\n  /**\n   * The unique identifier of an app in the dashboard.\n   */\n  appId?: string\n\n  /**\n   * The unique identifier of a project in the dashboard.\n   */\n  projectId?: string\n\n  /**\n   * The URL of Speechly SLU API endpoint. Defaults to https://api.speechly.com.\n   */\n  apiUrl: string\n\n  /**\n   * The sample rate of the audio to use.\n   */\n  sampleRate: number\n\n  /**\n   * Whether to output debug statements to the console.\n   */\n  debug: boolean\n\n  /**\n   * Whether to output updated segments to the console.\n   */\n  logSegments: boolean\n\n  /**\n   * Listener for client state changes.\n   */\n  callbacks?: EventCallbacks\n\n  /**\n   * Custom API client implementation.\n   * If not provided, an implementation based on Speechly SLU WebSocket API is used.\n   */\n  decoder?: CloudDecoder\n\n  /**\n   * Custom storage implementation.\n   * If not provided, browser's LocalStorage API is used.\n   */\n  storage?: Storage\n\n  /**\n   * Length of audio frame in milliseconds. Audio frame is the audio basic processing unit in VAD and audio history ringbuffer.\n   */\n  frameMillis: number\n\n  /**\n   * Number of history frames to keep in ringbuffer. They are sent upon start of context to capture the start of utterance, which is especially important to compensate loss of utterance start with VAD.\n   */\n  historyFrames: number\n}\n\n/**\n * The options which can be used to configure the client.\n * @public\n */\nexport interface DecoderOptions extends Partial<ResolvedDecoderOptions> {\n  /**\n   * Enable voice activity detection (VAD) configuration overrides\n   */\n  vad?: Partial<VadOptions>\n}\n\nexport const DecoderDefaultOptions = {\n  connect: true,\n  apiUrl: 'https://api.speechly.com',\n  sampleRate: DefaultSampleRate,\n  debug: false,\n  logSegments: false,\n  frameMillis: 30,\n  historyFrames: 5,\n}\n\n/**\n * Options for audio processor's voice activity detector (VAD).\n * Enabling VAD automatically starts and stops cloud speech decoding. This enables for hands-free use and eliminates silence from being sent to cloud for processing.\n *\n * VAD activates when signal energy exceeds both the absolute energy threshold ({@link noiseGateDb}) and the dynamic signal-to-noise threshold ({@link signalToNoiseDb}) for a period defined of time ({@link signalActivation}).\n *\n * When {@link enabled} is set, VAD's internal `signalDb`, `noiseLevelDb` and `isSignalDetected` states are updated.\n * With {@link controlListening} also set, `isSignalDetected` flag controls start and stop of cloud speech decoding.\n * @public\n */\nexport interface VadOptions {\n  /**\n   * Run signal detection for every full audio frame (by default 30 ms).\n   * Setting this to `false` saves some CPU cycles and {@link controlListening} won't have an effect.\n   *\n   * Default: false.\n   */\n  enabled: boolean\n\n  /**\n   * Enable VAD to automatically control {@link BrowserClient.start} and {@link BrowserClient.stop} based on isSignalDetected state.\n   *\n   * Default: true.\n   */\n  controlListening: boolean\n\n  /**\n   * Absolute signal energy threshold.\n   *\n   * Range: -90.0f [dB, extremely sensitive] to 0.0f [dB, extemely insensitive]. Default: -24 [dB].\n   */\n  noiseGateDb: number\n\n  /**\n   * Signal-to-noise energy threshold. Noise energy level is dynamically adjusted to current conditions.\n   *\n   * Default: 3.0 [dB].\n   */\n  signalToNoiseDb: number\n\n  /**\n   * Rate of background noise learn. Defined as duration in which background noise energy is adjusted halfway towards current frame's energy.\n   * Noise level is only adjusted when `isSignalDetected` flag is clear.\n   *\n   * Range: 0, 5000 [ms]. Default: 400 [ms].\n   */\n  noiseLearnHalftimeMillis: number\n\n  /**\n   * Number of past audio frames (by default 30 ms) analyzed for determining `isSignalDetected` state. Should be less or equal than {@link DecoderOptions.historyFrames} setting.\n   *\n   * Range: 1 to 32 [frames]. Default: 5 [frames].\n   */\n  signalSearchFrames: number\n\n  /**\n   * `isSignalDetected` will be set if ratio of loud/silent frames in past {@link signalSearchFrames} exceeds {@link signalActivation}.\n   *\n   * Range: 0.0 to 1.0. Default: 0.7.\n   */\n  signalActivation: number\n\n  /**\n   * `isSignalDetected` will be cleared if ratio of loud/silent frames in past {@link signalSearchFrames} goes lower than {@link signalRelease} and {@link signalSustainMillis} has elapsed.\n   *\n   * Range: 0.0 to 1.0. Default: 0.2.\n   */\n  signalRelease: number\n\n  /**\n   * Minimum duration to hold 'isSignalDetected' set. This effectively defines the minimum length of the utterance sent for speech decoding. Setting this below 2000 ms may degrade speech-to-text accuracy.\n   *\n   * Range: 2000 to 8000 [ms]. Default: 3000 [ms].\n   */\n  signalSustainMillis: number\n}\n\nexport interface AudioProcessorParameters {\n  vad?: Partial<VadOptions>\n}\n\n/**\n * Default options for voice activity detection (VAD)\n * @public\n */\nexport const VadDefaultOptions: VadOptions = {\n  enabled: false,\n  controlListening: true,\n  signalToNoiseDb: 3.0,\n  noiseGateDb: -24.0,\n  noiseLearnHalftimeMillis: 400,\n  signalSearchFrames: 5,\n  signalActivation: 0.7,\n  signalRelease: 0.2,\n  signalSustainMillis: 3000,\n}\n\nexport interface StreamOptions {\n  preserveSegments: boolean\n  sampleRate: number\n  /**\n   * Set audio worker to ‘immediate utterance processing’ mode. The worker controls start/stop internally without input from BrowserClient. Internally used with file upload.\n   * @internal\n   */\n  immediate: boolean\n  /**\n   * True if stream has been automatically started.\n   * @internal\n   */\n  autoStarted: boolean\n}\n\nexport const StreamDefaultOptions: StreamOptions = {\n  preserveSegments: false,\n  sampleRate: DefaultSampleRate,\n  immediate: false,\n  autoStarted: false,\n}\n\n/**\n * All possible states of a Speechly API client. Failed state is non-recoverable.\n * It is also possible to use arithmetics for state comparison, e.g. `if (state < speechly.ClientState.Disconnected)`,\n * to react to non-recoverable states.\n * @public\n */\nexport enum DecoderState {\n  Failed = 0,\n  Disconnected,\n  Connected,\n  Active,\n}\n\n/**\n * Array with methods for adding and removing event listener functions\n * @internal\n */\nexport class ListenerArray<T> extends Array<T> {\n  addEventListener(e: T): void {\n    this.push(e)\n  }\n\n  removeEventListener(e: T): void {\n    const index = this.findIndex(cb => cb === e)\n    if (index >= 0) {\n      this.splice(index, 1)\n    }\n  }\n}\n\n/**\n * All possible callbacks for the decoder.\n * @internal\n */\nexport class EventCallbacks {\n  stateChangeCbs: ListenerArray<(state: DecoderState) => void> = new ListenerArray()\n  transcriptCbs: ListenerArray<(contextId: string, segmentId: number, word: Word) => void> = new ListenerArray()\n  entityCbs: ListenerArray<(contextId: string, segmentId: number, entity: Entity) => void> = new ListenerArray()\n  intentCbs: ListenerArray<(contextId: string, segmentId: number, intent: Intent) => void> = new ListenerArray()\n\n  segmentChangeCbs: ListenerArray<(segment: Segment) => void> = new ListenerArray()\n  tentativeTranscriptCbs: ListenerArray<(contextId: string, segmentId: number, words: Word[], text: string) => void> = new ListenerArray()\n  tentativeEntityCbs: ListenerArray<(contextId: string, segmentId: number, entities: Entity[]) => void> = new ListenerArray()\n  tentativeIntentCbs: ListenerArray<(contextId: string, segmentId: number, intent: Intent) => void> = new ListenerArray()\n  contextStartedCbs: ListenerArray<(contextId: string) => void> = new ListenerArray()\n  contextStoppedCbs: ListenerArray<(contextId: string) => void> = new ListenerArray()\n  onVadStateChange: ListenerArray<(active: boolean) => void> = new ListenerArray()\n}\n\n/**\n * Valid options for a new audioContext. All options are optional.\n * @public\n */\nexport interface ContextOptions {\n  appId?: string\n\n  /**\n   * Inference time vocabulary.\n   */\n  vocabulary?: string[]\n\n  /**\n   * Inference time vocabulary bias.\n   */\n  vocabularyBias?: string[]\n\n  /**\n   * Inference time silence triggered segmentation.\n   */\n  silenceTriggeredSegmentation?: string[]\n\n  /**\n   * Inference timezone in [TZ database format](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).\n   * e.g. \"Africa/Abidjan\". Timezone should be wrapped to list, like [\"Africa/Abidjan\"].\n   */\n  timezone?: string[]\n\n  /**\n   * Inference time setting to use the non-streaming NLU variant. Set value to true to enable,\n   * (or to false to disable for the current context if this parameter is enabled in the configuration).\n   */\n  nonStreamingNlu?: boolean\n}\n\n/**\n * Error to be thrown when BrowserClient is already started\n * @public\n */\nexport const ErrAlreadyStarted = new Error('BrowserClient already started')\n\n/**\n * Error to be thrown when BrowserClient is already stopped\n * @public\n */\nexport const ErrAlreadyStopped = new Error('BrowserClient already stopped')\n", "import { DecoderState } from './types'\n\n/**\n * Converts client state value to a string, which could be useful for debugging or metrics.\n * @param state - the state of the client\n * @public\n */\nexport function stateToString(state: DecoderState): string {\n  return states.get(state) ?? 'unknown'\n}\n\n// TODO: generate this from the enum.\nconst states = new Map<DecoderState, string>([\n  [DecoderState.Failed, 'Failed'],\n  [DecoderState.Disconnected, 'Disconnected'],\n  [DecoderState.Connected, 'Connected'],\n  [DecoderState.Active, 'Active'],\n])\n", "// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}", "export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;", "import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;", "import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;", "import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;", "/*! http://mths.be/base64 v0.1.0 by @mathias | MIT license */\n;(function(root) {\n\n\t// Detect free variables `exports`.\n\tvar freeExports = typeof exports == 'object' && exports;\n\n\t// Detect free variable `module`.\n\tvar freeModule = typeof module == 'object' && module &&\n\t\tmodule.exports == freeExports && module;\n\n\t// Detect free variable `global`, from Node.js or Browserified code, and use\n\t// it as `root`.\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {\n\t\troot = freeGlobal;\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\tvar InvalidCharacterError = function(message) {\n\t\tthis.message = message;\n\t};\n\tInvalidCharacterError.prototype = new Error;\n\tInvalidCharacterError.prototype.name = 'InvalidCharacterError';\n\n\tvar error = function(message) {\n\t\t// Note: the error messages used throughout this file match those used by\n\t\t// the native `atob`/`btoa` implementation in Chromium.\n\t\tthrow new InvalidCharacterError(message);\n\t};\n\n\tvar TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\t// http://whatwg.org/html/common-microsyntaxes.html#space-character\n\tvar REGEX_SPACE_CHARACTERS = /[\\t\\n\\f\\r ]/g;\n\n\t// `decode` is designed to be fully compatible with `atob` as described in the\n\t// HTML Standard. http://whatwg.org/html/webappapis.html#dom-windowbase64-atob\n\t// The optimized base64-decoding algorithm used is based on @atk’s excellent\n\t// implementation. https://gist.github.com/atk/1020396\n\tvar decode = function(input) {\n\t\tinput = String(input)\n\t\t\t.replace(REGEX_SPACE_CHARACTERS, '');\n\t\tvar length = input.length;\n\t\tif (length % 4 == 0) {\n\t\t\tinput = input.replace(/==?$/, '');\n\t\t\tlength = input.length;\n\t\t}\n\t\tif (\n\t\t\tlength % 4 == 1 ||\n\t\t\t// http://whatwg.org/C#alphanumeric-ascii-characters\n\t\t\t/[^+a-zA-Z0-9/]/.test(input)\n\t\t) {\n\t\t\terror(\n\t\t\t\t'Invalid character: the string to be decoded is not correctly encoded.'\n\t\t\t);\n\t\t}\n\t\tvar bitCounter = 0;\n\t\tvar bitStorage;\n\t\tvar buffer;\n\t\tvar output = '';\n\t\tvar position = -1;\n\t\twhile (++position < length) {\n\t\t\tbuffer = TABLE.indexOf(input.charAt(position));\n\t\t\tbitStorage = bitCounter % 4 ? bitStorage * 64 + buffer : buffer;\n\t\t\t// Unless this is the first of a group of 4 characters…\n\t\t\tif (bitCounter++ % 4) {\n\t\t\t\t// …convert the first 8 bits to a single ASCII character.\n\t\t\t\toutput += String.fromCharCode(\n\t\t\t\t\t0xFF & bitStorage >> (-2 * bitCounter & 6)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t};\n\n\t// `encode` is designed to be fully compatible with `btoa` as described in the\n\t// HTML Standard: http://whatwg.org/html/webappapis.html#dom-windowbase64-btoa\n\tvar encode = function(input) {\n\t\tinput = String(input);\n\t\tif (/[^\\0-\\xFF]/.test(input)) {\n\t\t\t// Note: no need to special-case astral symbols here, as surrogates are\n\t\t\t// matched, and the input is supposed to only contain ASCII anyway.\n\t\t\terror(\n\t\t\t\t'The string to be encoded contains characters outside of the ' +\n\t\t\t\t'Latin1 range.'\n\t\t\t);\n\t\t}\n\t\tvar padding = input.length % 3;\n\t\tvar output = '';\n\t\tvar position = -1;\n\t\tvar a;\n\t\tvar b;\n\t\tvar c;\n\t\tvar d;\n\t\tvar buffer;\n\t\t// Make sure any padding is handled outside of the loop.\n\t\tvar length = input.length - padding;\n\n\t\twhile (++position < length) {\n\t\t\t// Read three bytes, i.e. 24 bits.\n\t\t\ta = input.charCodeAt(position) << 16;\n\t\t\tb = input.charCodeAt(++position) << 8;\n\t\t\tc = input.charCodeAt(++position);\n\t\t\tbuffer = a + b + c;\n\t\t\t// Turn the 24 bits into four chunks of 6 bits each, and append the\n\t\t\t// matching character for each of them to the output.\n\t\t\toutput += (\n\t\t\t\tTABLE.charAt(buffer >> 18 & 0x3F) +\n\t\t\t\tTABLE.charAt(buffer >> 12 & 0x3F) +\n\t\t\t\tTABLE.charAt(buffer >> 6 & 0x3F) +\n\t\t\t\tTABLE.charAt(buffer & 0x3F)\n\t\t\t);\n\t\t}\n\n\t\tif (padding == 2) {\n\t\t\ta = input.charCodeAt(position) << 8;\n\t\t\tb = input.charCodeAt(++position);\n\t\t\tbuffer = a + b;\n\t\t\toutput += (\n\t\t\t\tTABLE.charAt(buffer >> 10) +\n\t\t\t\tTABLE.charAt((buffer >> 4) & 0x3F) +\n\t\t\t\tTABLE.charAt((buffer << 2) & 0x3F) +\n\t\t\t\t'='\n\t\t\t);\n\t\t} else if (padding == 1) {\n\t\t\tbuffer = input.charCodeAt(position);\n\t\t\toutput += (\n\t\t\t\tTABLE.charAt(buffer >> 2) +\n\t\t\t\tTABLE.charAt((buffer << 4) & 0x3F) +\n\t\t\t\t'=='\n\t\t\t);\n\t\t}\n\n\t\treturn output;\n\t};\n\n\tvar base64 = {\n\t\t'encode': encode,\n\t\t'decode': decode,\n\t\t'version': '0.1.0'\n\t};\n\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine(function() {\n\t\t\treturn base64;\n\t\t});\n\t}\telse if (freeExports && !freeExports.nodeType) {\n\t\tif (freeModule) { // in Node.js or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = base64;\n\t\t} else { // in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (var key in base64) {\n\t\t\t\tbase64.hasOwnProperty(key) && (freeExports[key] = base64[key]);\n\t\t\t}\n\t\t}\n\t} else { // in Rhino or a web browser\n\t\troot.base64 = base64;\n\t}\n\n}(this));\n", "import { decode as base64Decode } from 'base-64'\n\ntype fetchFn = (input: RequestInfo, init?: RequestInit) => Promise<Response>\ntype nowFn = () => number\n\nexport const minTokenValidTime = 60 * 60 * 1000 // 1 hour\n\n/**\n * @internal\n */\nexport interface Token {\n  appId: string\n  projectId: string\n  deviceId: string\n  configId: string\n  scopes: string[]\n  issuer: string\n  audience: string\n  expiresAtMs: number\n}\n\nexport async function fetchToken(\n  baseUrl: string,\n  projectId: string | undefined,\n  appId: string | undefined,\n  deviceId: string,\n  fetcher: fetchFn = fetch,\n  nowFn: nowFn = Date.now,\n): Promise<string> {\n  let body\n  if (projectId !== undefined) {\n    body = { projectId, deviceId }\n  } else {\n    body = { appId, deviceId }\n  }\n\n  const response = await fetcher(baseUrl, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(body),\n  })\n\n  const json = await response.json()\n\n  if (response.status !== 200) {\n    throw Error(json.error ?? `Speechly API login request failed with ${response.status}`)\n  }\n\n  if (json.access_token === undefined) {\n    throw Error('Invalid login response from Speechly API')\n  }\n\n  if (!validateToken(json.access_token, projectId, appId, deviceId, nowFn)) {\n    throw Error('Invalid token received from Speechly API')\n  }\n\n  return json.access_token\n}\n\nexport function validateToken(\n  token: string,\n  projectId: string | undefined,\n  appId: string | undefined,\n  deviceId: string,\n  now: nowFn = Date.now,\n): boolean {\n  const decoded = decodeToken(token)\n  if (decoded.expiresAtMs - now() < minTokenValidTime) {\n    return false\n  }\n\n  if (decoded.appId !== appId || decoded.projectId !== projectId) {\n    return false\n  }\n\n  if (decoded.deviceId !== deviceId) {\n    return false\n  }\n\n  return true\n}\n\nexport function decodeToken(token: string): Token {\n  const b = token.split('.')[1]\n\n  let body: any\n  try {\n    body = JSON.parse(base64Decode(b))\n  } catch (e) {\n    throw new Error('Error decoding Speechly token!')\n  }\n\n  return {\n    appId: body.appId,\n    projectId: body.projectId,\n    deviceId: body.deviceId,\n    configId: body.configId,\n    scopes: body.scope.split(' '),\n    issuer: body.iss,\n    audience: body.aud,\n    expiresAtMs: body.exp * 1000, // JWT exp is in seconds, convert to ms, since that's what JS works with.\n  }\n}\n", "import { APIClient, ResponseCallback, CloseCallback, WebsocketResponse, WebsocketResponseType, WorkerSignal, ControllerSignal } from './types'\nimport WebsocketClient from 'web-worker:./worker'\nimport { AudioProcessorParameters, ContextOptions, StreamOptions, VadOptions } from '../client'\nimport { WebsocketError } from '../speechly/types'\n\ntype ContextCallback = (err?: Error, contextId?: string) => void\n\n/**\n * Controller to communicate with the web worker\n * @internal\n */\nexport class WebWorkerController implements APIClient {\n  private readonly worker: Worker\n  private onInitResolve?: () => void\n  private onInitReject?: (result: WebsocketError) => void\n  private resolveSourceSampleRateSet?: (value?: void) => void\n\n  private startCbs: ContextCallback[] = []\n  private stopCbs: ContextCallback[] = []\n  private onResponseCb: ResponseCallback = () => {}\n  private onCloseCb: CloseCallback = () => {}\n\n  onResponse(cb: ResponseCallback): void {\n    this.onResponseCb = cb\n  }\n\n  onClose(cb: CloseCallback): void {\n    this.onCloseCb = cb\n  }\n\n  constructor() {\n    this.worker = new WebsocketClient()\n    this.worker.addEventListener('message', this.onWebsocketMessage)\n  }\n\n  async initialize(apiUrl: string, authToken: string, targetSampleRate: number, debug: boolean): Promise<void> {\n    this.worker.postMessage({\n      type: ControllerSignal.connect,\n      apiUrl,\n      authToken,\n      targetSampleRate,\n      debug,\n    })\n\n    // Reset\n    this.startCbs = []\n    this.stopCbs = []\n\n    return new Promise((resolve, reject) => {\n      this.onInitResolve = () => {\n        this.onInitResolve = undefined\n        this.onInitReject = undefined\n        resolve()\n      }\n      this.onInitReject = (err: WebsocketError) => {\n        this.onInitResolve = undefined\n        this.onInitReject = undefined\n        reject(err) // Will throw WebsocketError in `await initialize()`\n      }\n    })\n  }\n\n  async initAudioProcessor(sourceSampleRate: number, frameMillis: number, historyFrames: number, vadOptions?: VadOptions): Promise<void> {\n    this.worker.postMessage({\n      type: ControllerSignal.initAudioProcessor,\n      sourceSampleRate: sourceSampleRate,\n      frameMillis: frameMillis,\n      historyFrames: historyFrames,\n      vadOptions: vadOptions,\n    })\n\n    return new Promise(resolve => {\n      this.resolveSourceSampleRateSet = resolve\n    })\n  }\n\n  /**\n   * Control audio processor parameters\n   * @param ap - Audio processor parameters to adjust\n   */\n  adjustAudioProcessor(ap: AudioProcessorParameters): void {\n    this.worker.postMessage({\n      type: ControllerSignal.adjustAudioProcessor,\n      params: ap,\n    })\n  }\n\n  async close(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.worker.postMessage({\n        type: ControllerSignal.CLOSE,\n        code: 1000,\n        message: 'Client has ended the session',\n      })\n      resolve()\n    })\n  }\n\n  async startStream(streamOptions: StreamOptions): Promise<void> {\n    this.worker.postMessage({ type: ControllerSignal.startStream, streamOptions: streamOptions })\n  }\n\n  async stopStream(): Promise<void> {\n    this.worker.postMessage({ type: ControllerSignal.stopStream })\n  }\n\n  async startContext(options?: ContextOptions): Promise<string> {\n    return new Promise((resolve, reject) => {\n      this.startCbs.push((err?, id?) => {\n        if (err !== undefined) {\n          reject(err)\n        } else {\n          resolve(id as string)\n        }\n      })\n\n      this.worker.postMessage({ type: ControllerSignal.START_CONTEXT, options })\n    })\n  }\n\n  async stopContext(): Promise<string> {\n    return new Promise((resolve, reject) => {\n      this.stopCbs.push((err?, id?) => {\n        if (err !== undefined) {\n          reject(err)\n        } else {\n          resolve(id as string)\n        }\n      })\n\n      this.worker.postMessage({ type: ControllerSignal.STOP_CONTEXT })\n    })\n  }\n\n  async switchContext(options: ContextOptions): Promise<string> {\n    return new Promise((resolve, reject) => {\n      this.startCbs.push((err?, id?) => {\n        if (err !== undefined) {\n          reject(err)\n        } else {\n          resolve(id as string)\n        }\n      })\n      this.worker.postMessage({ type: ControllerSignal.SWITCH_CONTEXT, options })\n    })\n  }\n\n  postMessage(message: Object): void {\n    this.worker.postMessage(message)\n  }\n\n  sendAudio(audioChunk: Float32Array): void {\n    this.worker.postMessage({ type: ControllerSignal.AUDIO, payload: audioChunk })\n  }\n\n  async setContextOptions(options: ContextOptions): Promise<void> {\n    this.worker.postMessage({ type: ControllerSignal.setContextOptions, options })\n  }\n\n  private readonly onWebsocketMessage = (event: MessageEvent): void => {\n    const response: WebsocketResponse = event.data\n    switch (response.type) {\n      case WorkerSignal.Opened:\n        if (this.onInitResolve) {\n          this.onInitResolve()\n        }\n        break\n      case WorkerSignal.Closed:\n        const e = new WebsocketError(\n          event.data.reason,\n          event.data.code,\n          event.data.wasClean,\n        )\n        if (this.onInitReject) {\n          this.onInitReject(e)\n        } else {\n          this.onCloseCb(e)\n        }\n        break\n      case WorkerSignal.AudioProcessorReady:\n        if (this.resolveSourceSampleRateSet != null) {\n          this.resolveSourceSampleRateSet()\n        }\n        break\n      case WebsocketResponseType.Started:\n        this.onResponseCb(response)\n        this.startCbs.forEach(cb => {\n          try {\n            cb(undefined, response.audio_context)\n          } catch (e) {\n            console.error('[SpeechlyClient] Error while invoking \"onStart\" callback:', e)\n          }\n        })\n        this.startCbs.length = 0\n        break\n      case WebsocketResponseType.Stopped:\n        this.onResponseCb(response)\n        this.stopCbs.forEach(cb => {\n          try {\n            cb(undefined, response.audio_context)\n          } catch (e) {\n            console.error('[SpeechlyClient] Error while invoking \"onStop\" callback:', e)\n          }\n        })\n        this.stopCbs.length = 0\n        break\n      default:\n        this.onResponseCb(response)\n    }\n  }\n}\n", "import { Storage as IStorage } from './types'\n\n/**\n * @internal\n */\nexport class LocalStorage implements IStorage {\n  private readonly storage: Storage\n\n  constructor() {\n    this.storage = window.localStorage\n  }\n\n  get(key: string): string | null {\n    const val = this.storage.getItem(key)\n    return val\n  }\n\n  set(key: string, val: string): void {\n    this.storage.setItem(key, val)\n  }\n\n  getOrSet(key: string, genFn: () => string): string {\n    let val = this.storage.getItem(key)\n    if (val === null) {\n      val = genFn()\n      this.storage.setItem(key, val)\n    }\n\n    return val\n  }\n}\n", "import {\n  TentativeTranscriptResponse,\n  TranscriptResponse,\n  TentativeEntitiesResponse,\n  EntityResponse,\n  IntentResponse,\n} from '../websocket'\nimport { Word, Entity, Intent } from '../speechly'\n\nexport function parseTentativeTranscript(data: TentativeTranscriptResponse, timeOffset: number): Word[] {\n  return data.words.map(({ word, index, start_timestamp, end_timestamp }) => {\n    return {\n      value: word,\n      index: index,\n      startTimestamp: start_timestamp + timeOffset,\n      endTimestamp: end_timestamp + timeOffset,\n      isFinal: false,\n    }\n  })\n}\n\nexport function parseTranscript(data: TranscriptResponse, timeOffset: number): Word {\n  return {\n    value: data.word,\n    index: data.index,\n    startTimestamp: data.start_timestamp + timeOffset,\n    endTimestamp: data.end_timestamp + timeOffset,\n    isFinal: true,\n  }\n}\n\nexport function parseTentativeEntities(data: TentativeEntitiesResponse): Entity[] {\n  return data.entities.map(({ entity, value, start_position, end_position }) => {\n    return {\n      type: entity,\n      value: value,\n      startPosition: start_position,\n      endPosition: end_position,\n      isFinal: false,\n    }\n  })\n}\n\nexport function parseEntity(data: EntityResponse): Entity {\n  return {\n    type: data.entity,\n    value: data.value,\n    startPosition: data.start_position,\n    endPosition: data.end_position,\n    isFinal: true,\n  }\n}\n\nexport function parseIntent(data: IntentResponse, isFinal: boolean): Intent {\n  return {\n    intent: data.intent,\n    isFinal: isFinal,\n  }\n}\n", "import { v4 as uuidv4 } from 'uuid'\n\nimport { validateToken, fetchToken } from '../websocket/token'\n\nimport { SegmentState, ErrAppIdChangeWithoutProjectLogin, Segment, SLUResults, WebsocketError } from '../speechly'\n\nimport {\n  APIClient,\n  WebWorkerController,\n  WebsocketResponse,\n  WebsocketResponseType,\n  TentativeTranscriptResponse,\n  TranscriptResponse,\n  TentativeEntitiesResponse,\n  EntityResponse,\n  IntentResponse,\n  WorkerSignal,\n} from '../websocket'\n\nimport { Storage, LocalStorage } from '../storage'\n\nimport { DecoderState, EventCallbacks, ContextOptions, VadOptions, AudioProcessorParameters, StreamOptions, StreamDefaultOptions, ResolvedDecoderOptions } from './types'\nimport { stateToString } from './state'\n\nimport { parseTentativeTranscript, parseIntent, parseTranscript, parseTentativeEntities, parseEntity } from './parsers'\n\nconst deviceIdStorageKey = 'speechly-device-id'\nconst authTokenKey = 'speechly-auth-token'\n\n/**\n * A client for Speechly Spoken Language Understanding (SLU) API. The client handles initializing the websocket\n * connection to Speechly API, sending control events and audio stream. It reads and dispatches the responses\n * through a high-level API for interacting with so-called speech segments.\n * @internal\n */\nexport class CloudDecoder {\n  private readonly debug: boolean\n  private readonly logSegments: boolean\n  private readonly projectId?: string\n  private readonly appId?: string\n  private readonly storage?: Storage\n  private readonly apiClient: APIClient\n  private readonly loginUrl: string\n  private readonly deviceId: string\n  private readonly apiUrl: string\n  streamOptions: StreamOptions = StreamDefaultOptions\n  private resolveStopStream?: any\n\n  private activeContexts = 0\n\n  private readonly audioContexts = new Map<string, SLUResults>()\n  private readonly maxReconnectAttemptCount = 10\n\n  private connectAttempt: number = 0\n  private connectPromise: Promise<void> | null = null\n\n  private authToken?: string\n  private readonly cbs: EventCallbacks[] = []\n\n  sampleRate: number\n  state: DecoderState = DecoderState.Disconnected\n\n  constructor(options: ResolvedDecoderOptions) {\n    this.logSegments = options.logSegments\n\n    this.appId = options.appId\n    this.projectId = options.projectId\n    this.sampleRate = options.sampleRate\n    this.debug = options.debug\n\n    if (this.appId !== undefined && this.projectId !== undefined) {\n      throw Error('[Decoder] You cannot use both appId and projectId at the same time')\n    } else if (this.appId === undefined && this.projectId === undefined) {\n      throw Error('[Decoder] Either an appId or a projectId is required')\n    }\n\n    const apiUrl = options.apiUrl\n    this.apiUrl = generateWsUrl(apiUrl.replace('http', 'ws') + '/ws/v1', this.sampleRate)\n    this.loginUrl = `${apiUrl}/login`\n\n    // Attempt to access local storage for caching settings. Do without if it's blocked by security settings\n    try {\n      this.storage = options.storage ?? new LocalStorage()\n      this.deviceId = this.storage.getOrSet(deviceIdStorageKey, uuidv4)\n    } catch (err) {\n      this.deviceId = uuidv4()\n    }\n\n    this.apiClient = new WebWorkerController()\n    this.apiClient.onResponse(this.handleWebsocketResponse)\n    this.apiClient.onClose(this.handleWebsocketClosure)\n\n    if (options.connect ?? true) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.connect()\n    }\n  }\n\n  private getReconnectDelayMs(attempt: number): number {\n    return 2 ** attempt * 100\n  }\n\n  private async sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms))\n  }\n\n  /**\n   * Connect to Speechly backend.\n   * This function will be called by initialize if not manually called earlier.\n   * Calling connect() immediately after constructor and setting callbacks allows\n   * prewarming the connection, resulting in less noticeable waits for the user.\n   */\n  async connect(): Promise<void> {\n    if (this.connectPromise === null) {\n      this.connectPromise = (async () => {\n        this.setState(DecoderState.Disconnected)\n        // Get auth token from cache or renew it\n        const storedToken = this.storage?.get(authTokenKey)\n        if (!storedToken || !validateToken(storedToken, this.projectId, this.appId, this.deviceId)) {\n          try {\n            this.authToken = await fetchToken(this.loginUrl, this.projectId, this.appId, this.deviceId, fetch)\n            // Cache the auth token in local storage for future use.\n            if (this.storage) {\n              this.storage.set(authTokenKey, this.authToken)\n            }\n          } catch (err) {\n            this.connectPromise = null\n            this.setState(DecoderState.Failed)\n            throw err\n          }\n        } else {\n          this.authToken = storedToken\n        }\n\n        // Establish websocket connection\n        try {\n          await this.apiClient.initialize(this.apiUrl, this.authToken, this.sampleRate, this.debug)\n        } catch (err) {\n          this.connectPromise = null\n          if (!(err instanceof WebsocketError && err.code === 1000)) {\n            this.setState(DecoderState.Failed)\n          }\n          throw err\n        }\n        this.advanceState(DecoderState.Connected)\n      })()\n    }\n    await this.connectPromise\n  }\n\n  /**\n   * Control audio processor parameters\n   * @param ap - Audio processor parameters to adjust\n   */\n  adjustAudioProcessor(ap: AudioProcessorParameters): void {\n    this.apiClient.adjustAudioProcessor(ap)\n  }\n\n  /**\n   * Closes the client by closing the API connection.\n   */\n  async close(): Promise<void> {\n    let error: string | undefined\n\n    try {\n      await this.apiClient.close()\n    } catch (err) {\n      // @ts-ignore\n      error = err.message\n    }\n\n    this.audioContexts.clear()\n    this.activeContexts = 0\n    this.connectPromise = null\n    this.setState(DecoderState.Disconnected)\n\n    if (error !== undefined) {\n      throw Error(error)\n    }\n  }\n\n  async startStream(streamOptions: StreamOptions): Promise<void> {\n    if (this.debug) {\n      console.log('[Decoder]', 'startStream')\n    }\n\n    this.streamOptions = streamOptions\n    this.audioContexts.clear()\n    this.activeContexts = 0\n\n    await this.apiClient.startStream(streamOptions)\n  }\n\n  async stopStream(): Promise<void> {\n    if (this.debug) {\n      console.log('[Decoder]', 'stopStream')\n    }\n\n    await this.apiClient.stopStream()\n\n    await this.waitResults()\n  }\n\n  private async waitResults(): Promise<void> {\n    // Wait for active contexts to finish\n    if (this.activeContexts > 0) {\n      const p = new Promise(resolve => {\n        this.resolveStopStream = resolve\n      })\n      await p\n    }\n    this.resolveStopStream = undefined\n  }\n\n  /**\n   * Starts a new SLU context by sending a start context event to the API.\n   */\n  async startContext(options?: ContextOptions): Promise<string> {\n    if (this.state === DecoderState.Failed) {\n      throw Error('[Decoder] startContext cannot be run in Failed state.')\n    } else if (this.state < DecoderState.Connected) {\n      await this.connect()\n    } else if (this.state > DecoderState.Connected) {\n      throw Error(\n        '[Decoder] Unable to complete startContext: Expected Connected state, but was in ' +\n          stateToString(this.state) +\n          '.',\n      )\n    }\n\n    this.setState(DecoderState.Active)\n    let contextId: string\n    if (this.projectId != null) {\n      if (options?.appId) {\n        contextId = await this.apiClient.startContext(options)\n      } else {\n        throw new Error('options.appId is required with project login')\n      }\n    } else {\n      if (options?.appId != null && this.appId !== options?.appId) {\n        this.setState(DecoderState.Failed)\n        throw ErrAppIdChangeWithoutProjectLogin\n      }\n      contextId = await this.apiClient.startContext(options)\n    }\n\n    // Ensure state has not been changed by await apiClient.startContext() due to websocket errors.\n    // Due to apiClient.startContext implementation, they don't throw an error here, but call handleWebsocketClosure instead which changes to DecoderState.Disconnected\n    if (this.state < DecoderState.Active) {\n      throw Error('[Decoder] Unable to complete startContext: Problem acquiring contextId')\n    }\n\n    return contextId\n  }\n\n  /**\n   * Send audio array.\n   */\n  sendAudio(audio: Float32Array): void {\n    this.apiClient.sendAudio(audio)\n  }\n\n  /**\n   * Stops current SLU context by sending a stop context event to the API and muting the microphone\n   * delayed by contextStopDelay = 250 ms\n   */\n  async stopContext(stopDelayMs: number): Promise<string> {\n    if (this.state === DecoderState.Failed) {\n      throw Error('[Decoder] stopContext cannot be run in unrecovable error state.')\n    } else if (this.state !== DecoderState.Active) {\n      throw Error(\n        '[Decoder] Unable to complete stopContext: Expected Active state, but was in ' +\n          stateToString(this.state) +\n          '.',\n      )\n    }\n    if (stopDelayMs > 0) {\n      await this.sleep(stopDelayMs)\n    }\n    const contextId = await this.apiClient.stopContext()\n    this.setState(DecoderState.Connected)\n    return contextId\n  }\n\n  /**\n   * Stops current context and immediately starts a new SLU context\n   * by sending a start context event to the API and unmuting the microphone.\n   * @param options - any custom options for the audio processing.\n   */\n  async switchContext(options: ContextOptions): Promise<string> {\n    if (this.state !== DecoderState.Active) {\n      throw Error(\n        '[Decoder] Unable to complete switchContext: Expected Active state, but was in ' +\n          stateToString(this.state) +\n          '.',\n      )\n    }\n    const contextId = await this.apiClient.switchContext(options)\n    return contextId\n  }\n\n  registerListener(listener: EventCallbacks): void {\n    this.cbs.push(listener)\n  }\n\n  async initAudioProcessor(sourceSampleRate: number, frameMillis: number, historyFrames: number, vadOptions?: VadOptions): Promise<void> {\n    await this.apiClient.initAudioProcessor(sourceSampleRate, frameMillis, historyFrames, vadOptions)\n  }\n\n  useSharedArrayBuffers(controlSAB: any, dataSAB: any): void {\n    this.apiClient.postMessage({\n      type: 'SET_SHARED_ARRAY_BUFFERS',\n      controlSAB,\n      dataSAB,\n    })\n  }\n\n  async setContextOptions(options: ContextOptions): Promise<void> {\n    await this.apiClient.setContextOptions(options)\n  }\n\n  private readonly handleWebsocketResponse = (response: WebsocketResponse): void => {\n    if (this.debug) {\n      console.log('[Decoder]', 'Received response', response)\n    }\n\n    switch (response.type) {\n      case WorkerSignal.VadSignalHigh:\n        this.cbs.forEach(cb => cb.onVadStateChange.forEach(f => f(true)))\n        break\n      case WorkerSignal.VadSignalLow:\n        this.cbs.forEach(cb => cb.onVadStateChange.forEach(f => f(false)))\n        break\n      case WorkerSignal.RequestContextStart:\n        this.activeContexts++\n        break\n      case WebsocketResponseType.Started: {\n        const params = response.params\n        this.audioContexts.set(response.audio_context, {\n          segments: new Map(),\n          audioStartTimeMillis: params?.audioStartTimeMillis ?? 0,\n        })\n        this.cbs.forEach(cb => cb.contextStartedCbs.forEach(f => f(response.audio_context)))\n        break\n      }\n      case WebsocketResponseType.Stopped: {\n        this.activeContexts--\n        this.cbs.forEach(cb => cb.contextStoppedCbs.forEach(f => f(response.audio_context)))\n        if (!this.streamOptions.preserveSegments) {\n          this.audioContexts.delete(response.audio_context)\n        }\n\n        // Signal stopStream listeners that the final results are in, it's ok to resolve the await\n        if (this.resolveStopStream !== undefined && this.activeContexts === 0) {\n          this.resolveStopStream()\n        }\n        break\n      }\n      default:\n        this.handleSegmentUpdate(response)\n        break\n    }\n  }\n\n  private readonly handleSegmentUpdate = (response: WebsocketResponse): void => {\n    const { audio_context, segment_id, type } = response\n    let { data } = response\n\n    const context = this.audioContexts.get(audio_context)\n    if (context === undefined) {\n      console.warn('[Decoder]', 'Received response for non-existent context', audio_context)\n      return\n    }\n\n    let segmentState = context.segments.get(segment_id) ?? new SegmentState(audio_context, segment_id)\n\n    switch (type) {\n      case WebsocketResponseType.TentativeTranscript:\n        data = data as TentativeTranscriptResponse\n        const words = parseTentativeTranscript(data, context.audioStartTimeMillis)\n        const transcript = data.transcript\n        this.cbs.forEach(cb => cb.tentativeTranscriptCbs.forEach(f => f(audio_context, segment_id, words, transcript)))\n        segmentState = segmentState.updateTranscript(words)\n        break\n      case WebsocketResponseType.Transcript:\n        data = data as TranscriptResponse\n        const word = parseTranscript(data, context.audioStartTimeMillis)\n        this.cbs.forEach(cb => cb.transcriptCbs.forEach(f => f(audio_context, segment_id, word)))\n        segmentState = segmentState.updateTranscript([word])\n        break\n      case WebsocketResponseType.TentativeEntities:\n        data = data as TentativeEntitiesResponse\n        const entities = parseTentativeEntities(data)\n        this.cbs.forEach(cb => cb.tentativeEntityCbs.forEach(f => f(audio_context, segment_id, entities)))\n        segmentState = segmentState.updateEntities(entities)\n        break\n      case WebsocketResponseType.Entity:\n        data = data as EntityResponse\n        const entity = parseEntity(data)\n        this.cbs.forEach(cb => cb.entityCbs.forEach(f => f(audio_context, segment_id, entity)))\n        segmentState = segmentState.updateEntities([entity])\n        break\n      case WebsocketResponseType.TentativeIntent:\n        data = data as IntentResponse\n        const tentativeIntent = parseIntent(data, false)\n        this.cbs.forEach(cb => cb.tentativeIntentCbs.forEach(f => f(audio_context, segment_id, tentativeIntent)))\n        segmentState = segmentState.updateIntent(tentativeIntent)\n        break\n      case WebsocketResponseType.Intent:\n        data = data as IntentResponse\n        const intent = parseIntent(data, true)\n        this.cbs.forEach(cb => cb.intentCbs.forEach(f => f(audio_context, segment_id, intent)))\n        segmentState = segmentState.updateIntent(intent)\n        break\n      case WebsocketResponseType.SegmentEnd:\n        segmentState = segmentState.finalize()\n        break\n      default:\n      // TODO: handle unexpected response types.\n    }\n\n    // Update the segment in current context.\n    context.segments.set(segment_id, segmentState)\n\n    // Update current contexts.\n    this.audioContexts.set(audio_context, context)\n\n    // Log segment to console\n    if (this.logSegments) {\n      console.info(segmentState.toString())\n    }\n\n    // Fire segment change event.\n    this.cbs.forEach(cb => cb.segmentChangeCbs.forEach(f => f(segmentState.toSegment())))\n  }\n\n  // eslint-disable-next-line @typescript-eslint/member-delimiter-style\n  private readonly handleWebsocketClosure = (err: WebsocketError): void => {\n    if (err.code === 1000) {\n      if (this.debug) {\n        console.log('[Decoder]', 'Websocket closed', err)\n      }\n    } else {\n      console.error('[Decoder]', 'Websocket closed due to error', err)\n\n      // If for some reason deviceId is missing, there's nothing else we can do but fail completely.\n      if (this.deviceId === undefined) {\n        this.setState(DecoderState.Failed)\n        console.error('[Decoder]', 'No deviceId. Giving up reconnecting.')\n        return\n      }\n\n      this.setState(DecoderState.Disconnected)\n      this.activeContexts = 0\n      this.audioContexts.clear()\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.reconnect()\n    }\n  }\n\n  private async reconnect(): Promise<void> {\n    console.log('Speechly reconnecting')\n\n    this.connectPromise = null\n    if (this.connectAttempt < this.maxReconnectAttemptCount) {\n      await this.sleep(this.getReconnectDelayMs(this.connectAttempt++))\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      await this.connect()\n    } else {\n      console.error('[Decoder] Maximum reconnect count reached, giving up automatic reconnect.')\n    }\n  }\n\n  private advanceState(newState: DecoderState): void {\n    if (this.state >= newState) {\n      return\n    }\n    this.setState(newState)\n  }\n\n  private setState(newState: DecoderState): void {\n    if (this.state === newState) {\n      return\n    }\n\n    if (this.debug) {\n      console.log('[Decoder]', stateToString(this.state), '->', stateToString(newState))\n    }\n\n    this.state = newState\n    this.cbs.forEach(cb => cb.stateChangeCbs?.forEach(f => f(newState)))\n  }\n\n  /**\n   * @returns Array of Segments since last startStream if preserveSegment options was used\n   */\n  getSegments(): Segment[] {\n    const result: Segment[] = []\n    this.audioContexts.forEach((audioContext, _) => {\n      audioContext.segments.forEach((segment, _) => {\n        const deepCopy = JSON.parse(JSON.stringify(segment))\n        result.push(deepCopy)\n      })\n    })\n    return result\n  }\n}\n\nfunction generateWsUrl(baseUrl: string, sampleRate: number): string {\n  const params = new URLSearchParams()\n  params.append('sampleRate', sampleRate.toString())\n\n  return `${baseUrl}?${params.toString()}`\n}\n", "export default `\n// Indices for the Control SAB.\nconst CONTROL = {\n  'WRITE_INDEX': 0,\n  'FRAMES_AVAILABLE': 1,\n  'LOCK': 2,\n};\n\nclass SpeechlyProcessor extends AudioWorkletProcessor {\n  constructor() {\n    super();\n\n    this._initialized = false;\n    this.debug = false;\n    this.port.onmessage = this._initialize.bind(this);\n  }\n\n  _initialize(event) {\n    this.controlSAB = new Int32Array(event.data.controlSAB);\n    this.dataSAB = new Float32Array(event.data.dataSAB);\n    this.debug = event.data.debug;\n    if (this.debug) {\n      console.log('[BrowserClient AudioWorkletNode]', 'initializing audioworklet');\n    }\n    this.sharedBufferSize = this.dataSAB.length;\n    this.buffer = new Float32Array(0);\n    this._initialized = true;\n  }\n\n  _transferDataToSharedBuffer(data) {\n    this.controlSAB[CONTROL.LOCK] = 1;\n    let inputWriteIndex = this.controlSAB[CONTROL.WRITE_INDEX];\n    if (this.controlSAB[CONTROL.FRAMES_AVAILABLE] > 0) {\n      if (inputWriteIndex + data.length > this.sharedBufferSize) {\n        // console.log('buffer overflow')\n        inputWriteIndex = 0;\n      }\n    }\n    this.dataSAB.set(data, inputWriteIndex);\n    this.controlSAB[CONTROL.WRITE_INDEX] = inputWriteIndex + data.length;\n    this.controlSAB[CONTROL.FRAMES_AVAILABLE] = inputWriteIndex + data.length;\n    this.controlSAB[CONTROL.LOCK] = 0;\n  }\n\n  _pushData(data) {\n    if (this.debug) {\n      const signalEnergy = getStandardDeviation(data)\n      this.port.postMessage({\n        type: 'STATS',\n        signalEnergy: signalEnergy,\n        samples: data.length,\n      });\n    }\n\n    if (this.buffer.length > this.sharedBufferSize) {\n      const dataToTransfer = this.buffer.subarray(0, this.sharedBufferSize);\n      this._transferDataToSharedBuffer(dataToTransfer);\n      this.buffer = this.buffer.subarray(this.sharedBufferSize);\n    }\n    let concat = new Float32Array(this.buffer.length + data.length);\n    concat.set(this.buffer);\n    concat.set(data, this.buffer.length);\n    this.buffer = concat;\n  }\n\n  process(inputs, outputs, parameters) {\n    const inputChannelData = inputs[0][0];\n    if (inputChannelData !== undefined) {\n      if (this.controlSAB && this.dataSAB) {\n        this._pushData(inputChannelData);\n      } else {\n        this.port.postMessage({\n          type: 'DATA',\n          frames: inputChannelData\n        });\n      }\n    }\n\n    return true;\n  }\n}\n\nfunction getStandardDeviation(array) {\n  const n = array.length\n  const mean = array.reduce((a, b) => a + b) / n\n  return Math.sqrt(array.map(x => Math.pow(x - mean, 2)).reduce((a, b) => a + b) / n)\n}\n\nregisterProcessor('speechly-worklet', SpeechlyProcessor);\n`\n", "import { DecoderState, EventCallbacks, DecoderOptions, ContextOptions, VadDefaultOptions, AudioProcessorParameters, StreamOptions, StreamDefaultOptions, DecoderDefaultOptions, ResolvedDecoderOptions, VadOptions, ErrAlreadyStarted, ErrAlreadyStopped } from './types'\nimport { CloudDecoder } from './decoder'\nimport { ErrDeviceNotSupported, DefaultSampleRate, Segment, Word, Entity, Intent, WebsocketError } from '../speechly'\n\nimport audioworklet from '../microphone/audioworklet'\n\n/**\n * Speechly BrowserClient streams audio containing speech for cloud processing and\n * provides the results of automatic speech recogition (ASR) and natural langugage understanding (NLU) via callbacks.\n *\n * Usage:\n *\n * - Create a BrowserClient instance with {@link DecoderOptions} containing a valid appId from https://api.speechly.com/dashboard.\n * - Create and initialize a {@link BrowserMicrophone} instance and {@link attach} its mediaStream to the BrowserClient instance.\n * - Control processing manually with {@link start} and {@link stop}. Alternatively, you can enable automatic control by initializing BrowserClient with {@link VadOptions} defined in the {@link DecoderOptions}.\n * - Read the ASR/NLU result {@link Segment} by providing a custom handler for the {@link onSegmentChange} callback.\n *\n * Alternatively, you can create the BrowserClient instance and process audio files (binary data) using {@link uploadAudioData}.\n * @public\n */\nexport class BrowserClient {\n  private readonly contextStopDelay = 250\n  private readonly nativeResamplingSupported: boolean\n  private readonly debug: boolean = false\n  private readonly useSAB: boolean\n  private readonly isSafari: boolean\n  private readonly isMobileSafari: boolean\n  private readonly decoder: CloudDecoder\n  private readonly callbacks: EventCallbacks\n\n  private audioContext?: AudioContext\n  private initialized: boolean = false\n  private audioProcessorInitialized: boolean = false\n  private isStreaming: boolean = false\n  private active: boolean = false\n  private speechlyNode?: AudioWorkletNode\n  private audioProcessor?: ScriptProcessorNode\n  private stream?: MediaStreamAudioSourceNode\n  private listeningPromise: Promise<any> | null = null\n  private readonly decoderOptions: ResolvedDecoderOptions & { vad?: VadOptions }\n  private streamOptions: StreamOptions = { ...StreamDefaultOptions }\n\n  private stats = {\n    maxSignalEnergy: 0.0,\n    sentSamples: 0,\n  }\n\n  /**\n   * Create a new BrowserClient instance.\n   *\n   * @param customOptions - any custom options for BrowserClient and the enclosed CloudDecoder.\n   */\n  constructor(customOptions: DecoderOptions) {\n    this.decoderOptions = {\n      ...DecoderDefaultOptions,\n      ...customOptions,\n      vad: customOptions.vad ? { ...VadDefaultOptions, ...customOptions.vad } : undefined,\n    }\n\n    const constraints = window.navigator.mediaDevices.getSupportedConstraints()\n    this.nativeResamplingSupported = constraints.sampleRate === true\n\n    this.isMobileSafari = iOS()\n    // @ts-ignore\n    this.isSafari = this.isMobileSafari || window.safari !== undefined\n    this.useSAB = !this.isSafari\n\n    this.debug = this.decoderOptions.debug ?? true\n    this.callbacks = new EventCallbacks()\n    this.callbacks.stateChangeCbs.addEventListener(this.handleStateChange.bind(this))\n    this.callbacks.onVadStateChange.addEventListener(this.autoControlListening.bind(this))\n    this.decoder = this.decoderOptions.decoder ?? new CloudDecoder(this.decoderOptions)\n    this.decoder.registerListener(this.callbacks)\n  }\n\n  /**\n   * Connect to cloud, create an AudioContext for receiving audio samples from a MediaStream\n   * and initialize a worker for audio processing and bi-directional streaming to the cloud.\n   */\n  async initialize(options?: { mediaStream?: MediaStream }): Promise<void> {\n    if (this.initialized) {\n      return\n    }\n    if (this.debug) {\n      console.log('[BrowserClient]', 'initializing')\n    }\n\n    this.initialized = true\n\n    try {\n      await this.decoder.connect()\n    } catch (err) {\n      this.initialized = false\n      if (err instanceof WebsocketError) {\n        if (err.code === 1000) {\n          if (this.debug) {\n            console.log('[BrowserClient]', 'Early close of websocket.')\n          }\n          return\n        }\n        throw Error(`Unable to connect. Most likely there is no connection to network. Websocket error code: ${err.code}`)\n      } else {\n        throw err\n      }\n    }\n\n    try {\n      const opts: AudioContextOptions = {}\n      if (this.nativeResamplingSupported) {\n        opts.sampleRate = DefaultSampleRate\n      }\n      if (window.webkitAudioContext !== undefined) {\n        // create webkit flavor of audiocontext\n        try {\n          // eslint-disable-next-line new-cap\n          this.audioContext = new window.webkitAudioContext(opts)\n        } catch (err) {\n          if (this.debug) {\n            console.log('[BrowserClient]', 'creating audioContext without samplerate conversion', err)\n          }\n          // older webkit without constructor options\n          // eslint-disable-next-line new-cap\n          this.audioContext = new window.webkitAudioContext()\n        }\n      } else {\n        this.audioContext = new window.AudioContext(opts)\n        // Start audio context if we are dealing with a WebKit browser.\n        //\n        // WebKit browsers (e.g. Safari) require to resume the context first,\n        // before obtaining user media by calling `mediaDevices.getUserMedia`.\n        //\n        // If done in a different order, the audio context will resume successfully,\n        // but will emit empty audio buffers.\n        if (window.webkitAudioContext !== undefined) {\n          await this.audioContext.resume()\n        }\n      }\n    } catch {\n      this.initialized = false\n      throw ErrDeviceNotSupported\n    }\n\n    if (!this.isSafari && window.AudioWorkletNode !== undefined) {\n      if (this.debug) {\n        console.log('[BrowserClient]', 'using AudioWorkletNode')\n      }\n      const blob = new Blob([audioworklet], { type: 'text/javascript' })\n      const blobURL = window.URL.createObjectURL(blob)\n      await this.audioContext.audioWorklet.addModule(blobURL)\n      this.speechlyNode = new AudioWorkletNode(this.audioContext, 'speechly-worklet')\n      this.speechlyNode.connect(this.audioContext.destination)\n      // @ts-ignore\n      if (this.useSAB && window.SharedArrayBuffer !== undefined) {\n        // Chrome, Edge, Firefox, Firefox Android\n        if (this.debug) {\n          console.log('[BrowserClient]', 'using SharedArrayBuffer')\n        }\n        // @ts-ignore\n        const controlSAB = new window.SharedArrayBuffer(4 * Int32Array.BYTES_PER_ELEMENT)\n        // @ts-ignore\n        const dataSAB = new window.SharedArrayBuffer(1024 * Float32Array.BYTES_PER_ELEMENT)\n        this.decoder.useSharedArrayBuffers(controlSAB, dataSAB)\n        this.speechlyNode.port.postMessage({\n          type: 'SET_SHARED_ARRAY_BUFFERS',\n          controlSAB,\n          dataSAB,\n          debug: this.debug,\n        })\n      } else {\n        // Safari, Opera, Chrome Android, Webview Android\n        // or if site CORS headers do not allow SharedArrayBuffer\n        if (this.debug) {\n          console.log('[BrowserClient]', 'can not use SharedArrayBuffer')\n        }\n      }\n\n      this.speechlyNode.port.onmessage = (event: MessageEvent) => {\n        switch (event.data.type) {\n          case 'STATS':\n            if (event.data.signalEnergy > this.stats.maxSignalEnergy) {\n              this.stats.maxSignalEnergy = event.data.signalEnergy\n            }\n            this.stats.sentSamples += parseInt(event.data.samples)\n            break\n          case 'DATA':\n            // this is not called if SAB is used, the buffers are sent immediately\n            this.handleAudio(event.data.frames)\n            break\n          default:\n        }\n      }\n    } else {\n      if (this.debug) {\n        console.log('[BrowserClient]', 'using ScriptProcessorNode')\n      }\n      if (window.webkitAudioContext !== undefined) {\n        // Multiply base buffer size of 4 kB by the resample ratio rounded up to the next power of 2.\n        // i.e. for 48 kHz to 16 kHz downsampling, this will be 4096 (base) * 4 = 16384.\n        const resampleRatio = this.audioContext.sampleRate / DefaultSampleRate\n        const bufSize = 4096 * Math.pow(2, Math.ceil(Math.log(resampleRatio) / Math.log(2)))\n        this.audioProcessor = this.audioContext.createScriptProcessor(bufSize, 1, 1)\n      } else {\n        this.audioProcessor = this.audioContext.createScriptProcessor(undefined, 1, 1)\n      }\n      this.audioProcessor.connect(this.audioContext.destination)\n      this.audioProcessor.addEventListener('audioprocess', (event: AudioProcessingEvent) => {\n        this.handleAudio(event.inputBuffer.getChannelData(0))\n      })\n    }\n    if (this.debug) {\n      console.log('[BrowserClient]', 'audioContext sampleRate is', this.audioContext?.sampleRate)\n    }\n    this.streamOptions.sampleRate = this.audioContext?.sampleRate\n    await this.decoder.initAudioProcessor(this.streamOptions.sampleRate, this.decoderOptions.frameMillis, this.decoderOptions.historyFrames, this.decoderOptions.vad)\n    this.audioProcessorInitialized = true\n\n    if (options?.mediaStream) {\n      await this.attach(options?.mediaStream)\n    }\n  }\n\n  /**\n   * Attach a MediaStream to the client, enabling the client to send the audio to the\n   * Speechly API for processing. The processing is activated by calling\n   * {@link BrowserClient.start} and deactivated by calling {@link BrowserClient.stop}.\n   */\n  async attach(mediaStream: MediaStream): Promise<void> {\n    await this.initialize()\n    await this.detach()\n    this.stream = this.audioContext?.createMediaStreamSource(mediaStream)\n    // ensure audioContext is active\n    if (this.audioContext?.state !== 'running') {\n      if (this.debug) {\n        console.log('[BrowserClient]', 'audioContext resume required, state is', this.audioContext?.state)\n      }\n      await this.audioContext?.resume()\n    }\n    if (this.speechlyNode) {\n      this.stream?.connect(this.speechlyNode)\n    } else if (this.audioProcessor) {\n      this.stream?.connect(this.audioProcessor)\n    } else {\n      throw Error('[BrowserClient] cannot attach to mediaStream, not initialized')\n    }\n    await this.autoControlStream()\n  }\n\n  /**\n   * @returns Whether the client is processing audio at the moment.\n   */\n  isActive(): boolean {\n    return this.active\n  }\n\n  /**\n   * Starts a new audio context, returning it's id to use for matching received responses.\n   * If an active context already exists, an error is thrown.\n   *\n   * @param options - any custom options for the audio processing.\n   * @returns The contextId of the active audio context\n   */\n  async start(options?: ContextOptions): Promise<string> {\n    if (this.active) {\n      throw ErrAlreadyStarted\n    }\n\n    this.active = true\n\n    const contextId = await this.queueTask(async () => {\n      await this.initialize()\n      if (!this.isStreaming) {\n        // Automatically control streaming for backwards compability\n        await this.startStream({ autoStarted: true })\n      }\n      const contextId = await this.decoder.startContext(options)\n      return contextId\n    })\n    return contextId\n  }\n\n  /**\n   * Stops the current audio context and deactivates the audio processing pipeline.\n   * If there is no active audio context, a warning is logged to console.\n   */\n  async stop(stopDelayMs = this.contextStopDelay): Promise<string> {\n    if (!this.active) {\n      throw ErrAlreadyStopped\n    }\n\n    this.active = false\n\n    const contextId = await this.queueTask(async () => {\n      try {\n        const contextId = await this.decoder.stopContext(stopDelayMs)\n        // Automatically control streaming for backwards compability\n        if (!this.decoderOptions.vad?.enabled && this.isStreaming && this.streamOptions.autoStarted) {\n          await this.stopStream()\n        }\n\n        if (this.stats.sentSamples === 0) {\n          console.warn('[BrowserClient]', 'audioContext contained no audio data')\n        }\n        return contextId\n      } catch (err) {\n        console.warn('[BrowserClient]', 'stop() failed', err)\n      } finally {\n        this.stats.sentSamples = 0\n      }\n    })\n\n    return contextId\n  }\n\n  /**\n   * Sets the default context options (appId, inference parameters, timezone). New audio contexts\n   * use these options until new options are provided. Decoder's functions startContext() can\n   * also override the options per function call.\n   */\n  async setContextOptions(options: ContextOptions): Promise<void> {\n    await this.decoder.setContextOptions(options)\n  }\n\n  /**\n   * Control audio processor parameters like VAD\n   * @param ap - Audio processor parameters to adjust\n   */\n  adjustAudioProcessor(ap: AudioProcessorParameters): void {\n    if (ap.vad) {\n      if (this.decoderOptions.vad) {\n        this.decoderOptions.vad = { ...this.decoderOptions.vad, ...ap.vad }\n      } else {\n        throw Error('Unable to adjust VAD - it was not defined in the constructor')\n      }\n    }\n    this.decoder.adjustAudioProcessor(ap)\n\n    if (this.decoderOptions.vad?.enabled) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.autoControlStream()\n    } else {\n      if (this.active) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.stop()\n      }\n    }\n  }\n\n  /**\n   * Upload an audio binary (like .wav) to the cloud for automatic speech recogition (ASR) and natural langugage understanding (NLU).\n   * Callbacks are fired as the processing advances.\n   *\n   * @param audioData - audio data in a binary format. Will be decoded.\n   * @param options - any custom options for the audio processing.\n   * @returns array of segments containing the final results of speech recognition (ASR and NLU).\n   */\n  async uploadAudioData(audioData: ArrayBuffer, options?: ContextOptions): Promise<Segment[]> {\n    await this.initialize()\n    const audioBuffer = await this.audioContext?.decodeAudioData(audioData)\n    if (audioBuffer === undefined) {\n      throw Error('Could not decode audioData')\n    }\n    const samples = audioBuffer.getChannelData(0)\n\n    // convert 2-channel audio to 1-channel if need be\n    if (audioBuffer.numberOfChannels > 1) {\n      const chan1samples = audioBuffer.getChannelData(1)\n      for (let i = 0; i < samples.length; i++) {\n        samples[i] = (samples[i] + chan1samples[i]) / 2.0\n      }\n    }\n\n    if (this.active) await this.stop(0)\n    if (this.isStreaming) await this.stopStream()\n\n    await this.startStream({\n      sampleRate: audioBuffer.sampleRate,\n      preserveSegments: true,\n      immediate: true,\n    })\n\n    const vadActive = this.decoderOptions.vad?.enabled && this.decoderOptions.vad?.controlListening\n    const chunkMillis = 1000\n    let throttlingWaitMillis = 0\n\n    if (!vadActive) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      await this.start(options)\n    } else {\n      if (options) await this.setContextOptions(options)\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      if (this.decoderOptions.vad!.signalSustainMillis >= chunkMillis) {\n        const allowedContexts = 10\n        const lookbackWindowMillis = 10000\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const worstCaseContextsInLookback = lookbackWindowMillis / this.decoderOptions.vad!.signalSustainMillis\n        const maxSpeedUp = allowedContexts / worstCaseContextsInLookback\n        throttlingWaitMillis = chunkMillis / maxSpeedUp\n      } else {\n        console.warn(`Throttling disabled due to low (<= ${chunkMillis}) VAD sustain value. Server may disconnect while processing if contexts are created at high rate.`)\n      }\n      throttlingWaitMillis = 0 // @DEBUG\n    }\n\n    let sendBuffer: Float32Array\n    const chunkSamples = Math.round(audioBuffer.sampleRate * chunkMillis / 1000)\n\n    for (let b = 0; b < samples.length; b += chunkSamples) {\n      const e = b + chunkSamples\n      if (e > samples.length) {\n        sendBuffer = samples.slice(b)\n      } else {\n        sendBuffer = samples.slice(b, e)\n      }\n      this.handleAudio(sendBuffer)\n      await this.sleep(throttlingWaitMillis)\n    }\n\n    if (!vadActive) {\n      await this.stop(0)\n    }\n\n    await this.stopStream()\n\n    // Store result before startStream as it'll clear the results\n    const result = this.decoder.getSegments()\n\n    return result\n  }\n\n  /**\n   * `startStream` is used to indicate start of continuous audio stream.\n   * It resets the stream sample counters and history.\n   * BrowserClient internally calls `startStream` upon `initialize` and `start` so it's not needed unless you've manually called `stopStream` and want to resume audio processing afterwards.\n   * @param streamOptionOverrides - options for stream processing\n   */\n  async startStream(streamOptionOverrides?: Partial<StreamOptions>): Promise<void> {\n    this.streamOptions = { ...this.streamOptions, autoStarted: false, ...streamOptionOverrides }\n    await this.decoder.startStream(this.streamOptions)\n    this.isStreaming = true\n  }\n\n  /**\n   * `stopStream` is used to indicate end of continuous audio stream.\n   * It ensures that all of the internal audio buffers are flushed for processing.\n   * BrowserClient internally calls `stopStream` upon `stop` so it's not needed unless then source audio stream is no longer available or you manually want to pause audio processing.\n   * Use `startStream` to resume audio processing afterwards.\n   */\n  async stopStream(): Promise<void> {\n    if (this.isStreaming) {\n      this.isStreaming = false\n      await this.decoder.stopStream()\n    }\n  }\n\n  private async queueTask(task: () => Promise<any>): Promise<any> {\n    const prevTask = this.listeningPromise\n    this.listeningPromise = (async () => {\n      await prevTask\n      return task()\n    })()\n    return this.listeningPromise\n  }\n\n  private autoControlListening(vadActive: boolean): void {\n    if (this.debug) {\n      console.log('[BrowserClient]', 'autoControlListening', vadActive)\n    }\n    if (this.decoderOptions.vad?.controlListening) {\n      if (vadActive) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        if (!this.active) this.start()\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        if (this.active) this.stop(0)\n      }\n    }\n  }\n\n  private async autoControlStream(): Promise<void> {\n    if (!this.audioProcessorInitialized) return\n\n    if (!this.stream) return\n\n    // Auto-start stream if VAD is enabled\n    if (this.decoderOptions.vad?.enabled && !this.isStreaming) {\n      await this.startStream({ autoStarted: true })\n      return\n    }\n\n    // Auto-stop stream if automatically started\n    if (!this.decoderOptions.vad?.enabled && this.isStreaming && this.streamOptions.autoStarted) {\n      await this.stopStream()\n    }\n  }\n\n  private handleStateChange(decoderState: DecoderState): void {\n    switch (decoderState) {\n      case DecoderState.Disconnected:\n      case DecoderState.Failed:\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.stopStream()\n        this.active = false\n        this.listeningPromise = null\n        break\n    }\n  }\n\n  /**\n   * Detach or disconnect the client from the audio source.\n   */\n  async detach(): Promise<void> {\n    if (this.active) {\n      await this.stop(0)\n    }\n    if (this.stream) {\n      this.stream.disconnect()\n      this.stream = undefined\n    }\n  }\n\n  /**\n   * Closes the client, detaching from any audio source and disconnecting any audio\n   * processors.\n   */\n  async close(): Promise<void> {\n    if (this.debug) {\n      console.log('[BrowserClient]', 'close')\n    }\n    await this.detach()\n    if (this.speechlyNode !== null) {\n      this.speechlyNode?.port.close()\n      this.speechlyNode?.disconnect()\n    }\n    // Disconnect and stop ScriptProcessorNode\n    if (this.audioProcessor !== undefined) {\n      this.audioProcessor?.disconnect()\n    }\n    await this.decoder.close()\n    this.initialized = false\n    this.listeningPromise = null\n  }\n\n  private async sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms))\n  }\n\n  private handleAudio(array: Float32Array): void {\n    if (this.isStreaming) {\n      this.stats.sentSamples += array.length\n      this.decoder.sendAudio(array)\n    }\n  }\n\n  /**\n   * Adds a listener for start events\n   * @param cb - the callback to invoke on context start\n   */\n  onStart(cb: (contextId: string) => void): void {\n    this.callbacks.contextStartedCbs.addEventListener(cb)\n  }\n\n  /**\n   * Adds a listener for stop events\n   * @param cb - the callback to invoke on context stop\n   */\n  onStop(cb: (contextId: string) => void): void {\n    this.callbacks.contextStoppedCbs.addEventListener(cb)\n  }\n\n  /**\n   * Adds a listener for current segment change events.\n   * @param cb - the callback to invoke on segment change events.\n   */\n  onSegmentChange(cb: (segment: Segment) => void): void {\n    this.callbacks.segmentChangeCbs.addEventListener(cb)\n  }\n\n  /**\n   * Adds a listener for transcript responses from the API.\n   * @param cb - the callback to invoke on a transcript response.\n   */\n  onTranscript(cb: (contextId: string, segmentId: number, word: Word) => void): void {\n    this.callbacks.transcriptCbs.addEventListener(cb)\n  }\n\n  /**\n   * Adds a listener for entity responses from the API.\n   * @param cb - the callback to invoke on an entity response.\n   */\n  onEntity(cb: (contextId: string, segmentId: number, entity: Entity) => void): void {\n    this.callbacks.entityCbs.addEventListener(cb)\n  }\n\n  /**\n   * Adds a listener for intent responses from the API.\n   * @param cb - the callback to invoke on an intent response.\n   */\n  onIntent(cb: (contextId: string, segmentId: number, intent: Intent) => void): void {\n    this.callbacks.intentCbs.addEventListener(cb)\n  }\n\n  /**\n   * Adds a listener for tentative transcript responses from the API.\n   * @param cb - the callback to invoke on a tentative transcript response.\n   */\n  onTentativeTranscript(cb: (contextId: string, segmentId: number, words: Word[], text: string) => void): void {\n    this.callbacks.tentativeTranscriptCbs.addEventListener(cb)\n  }\n\n  /**\n   * Adds a listener for tentative entities responses from the API.\n   * @param cb - the callback to invoke on a tentative entities response.\n   */\n  onTentativeEntities(cb: (contextId: string, segmentId: number, entities: Entity[]) => void): void {\n    this.callbacks.tentativeEntityCbs.addEventListener(cb)\n  }\n\n  /**\n   * Adds a listener for tentative intent responses from the API.\n   * @param cb - the callback to invoke on a tentative intent response.\n   */\n  onTentativeIntent(cb: (contextId: string, segmentId: number, intent: Intent) => void): void {\n    this.callbacks.tentativeIntentCbs.addEventListener(cb)\n  }\n\n  /**\n   * Adds a listener for the state changes of the client.\n   * @param cb - the callback to invoke on a client state change.\n   */\n  onStateChange(cb: (state: DecoderState) => void): void {\n    this.callbacks.stateChangeCbs.addEventListener(cb)\n  }\n}\n\nfunction iOS(): boolean {\n  const iosPlatforms = ['iPad Simulator', 'iPhone Simulator', 'iPod Simulator', 'iPad', 'iPhone', 'iPod']\n  return (\n    iosPlatforms.indexOf(navigator.platform) >= 0 ||\n    // iPad on iOS 13 detection\n    (navigator.userAgent.includes('Mac') && 'ontouchend' in document)\n  )\n}\n", null, null, null],
  "mappings": "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",
  "names": ["base64Decode", "AudioSourceState", "WebsocketResponseType", "WorkerSignal", "ControllerSignal", "DecoderState", "global", "base64", "this", "e", "WebsocketClient", "_a", "uuidv4", "_", "contextId", "__awaiter"]
}
